<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>没有草的草屋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://oahgnehzoul.github.io/"/>
  <updated>2016-10-26T05:53:00.000Z</updated>
  <id>http://oahgnehzoul.github.io/</id>
  
  <author>
    <name>oahzol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 动态更新方案</title>
    <link href="http://oahgnehzoul.github.io/2016/10/26/iOS-%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88/"/>
    <id>http://oahgnehzoul.github.io/2016/10/26/iOS-动态更新方案/</id>
    <published>2016-10-26T04:40:19.000Z</published>
    <updated>2016-10-26T05:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前 iOS 上的动态更新方案主要有以下4种：</p>
<ul>
<li>HTML5</li>
<li>lua(wax) hotpatch</li>
<li>react native</li>
<li>framework</li>
</ul>
<p>前三种都是通过在应用内搭建一个运行环境来实现动态更新，在用户体验和交互上有一定限制。<br>使用 framework 可以使用原生的 OC/Swift 开发，成本低，但是 Apple 不希望开发者绕过 App Store 来更新 app，只有不需要上架的应用，才能以 framework 的方式来更新 app</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前 iOS 上的动态更新方案主要有以下4种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;lua(wax) hotpatch&lt;/li&gt;
&lt;li&gt;react native&lt;/li&gt;
&lt;li&gt;framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前三种都是通过在应用内搭
    
    </summary>
    
      <category term="iOS" scheme="http://oahgnehzoul.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title> iOS 中的静态库与动态库</title>
    <link href="http://oahgnehzoul.github.io/2016/10/24/iOS-%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <id>http://oahgnehzoul.github.io/2016/10/24/iOS-静态库与动态库/</id>
    <published>2016-10-24T08:48:14.000Z</published>
    <updated>2016-10-26T05:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><p>静态库:是一个外部函数与变量的集合体。<br>静态库的文件内容，通常包含一堆我们自定的变量与函数，内容不详动态链接库那么复杂，在编译期间由编译器和链接器将它集成到应用程序内，并制作成目标文件以及可以独立运行的可执行文件，这个可执行文件与编译可执行的程序，都是一种程序的静态创建。</p>
<h4 id="与动态链接库比较"><a href="#与动态链接库比较" class="headerlink" title="与动态链接库比较"></a>与动态链接库比较</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>　　只需保证在开发者的计算机有正确的库文件，在以二进制发布时不需考虑在用户的计算机上库文件是否存在和版本问题，可避免DLL地狱(在 mw 系统中，因为 DLL 的版本或兼容性问题造成程序无法运行)等问题</p>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>　　生成的可执行文件体积较大。正是为了避免此问题，才开发了动态库技术。
　　</p>
<h3 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h3><p>是微软公司在微软视窗操作系统中实现共享函数库概念的一种实作方式。<br>动态链接，就是把一些经常会共用的代码（静态链接的 obj 程序库）制成 DLL 档，当可执行文件调用到 DLL 档内的函数时，Windows 操作系统会把 DLL 档加载到内存中，DLL 档本身就是可执行文件，当程序需求函数才进行链接。通过动态链接方式，可以降低内存浪费的发生。静态链接则是直接链接到可执行文件。</p>
<p>以上摘抄自某<code>wiki</code></p>
<h3 id="iOS-里的静态库和动态库"><a href="#iOS-里的静态库和动态库" class="headerlink" title="iOS 里的静态库和动态库"></a>iOS 里的静态库和动态库</h3><p>之前被问到静态库和动态库什么区别。。<br>库分为开源库和闭源库，闭源库又分为静态库和动态库。但是由于 AppStore 的限制，上架应用只能使用苹果提供的动态链接库，第三方库只能做成静态库。</p>
<p><code>.a</code> 文件肯定是静态库，<code>.dylib</code> 肯定是动态库，<code>.framework</code> 都有可能<br>静态库在链接时，完整地被拷贝到可执行文件中，多个 app 如果使用同一个静态库，每个 app 都会拷贝一份；动态库在程序运行时动态加载到内存中，系统只会加载一次，多个程序共用一份，节约内存。</p>
<p>编译过程和链接过程要区分开，静态库只在静态链接过程中起作用；静态库是 target object 文件的 archive 结构，链接时会将一些东西合并生成最终可执行文件的 Mach-O 结构</p>
<p>大范围使用动态库会拖慢启动时间，动态链接器需要在程序加载时去执行链接过程，也就是说把静态链接做的事情放到运行时做；系统的 SDK 可以共享内存的方式减少向虚拟内存映射的,但是符号链接的过程不会少。</p>
<h4 id="创建静态库"><a href="#创建静态库" class="headerlink" title="创建静态库"></a>创建静态库</h4><h5 id="1-a"><a href="#1-a" class="headerlink" title="1.a"></a><code>1.a</code></h5><p>创建Cocoa Touch Static Library</p>
<h5 id="2-framework"><a href="#2-framework" class="headerlink" title="2.framework"></a><code>2.framework</code></h5><p>创建Cocoa Touch Framework，然后Mach-O Type 选择 Static Library，<br><code>模拟器架构
iPhone4s ~ 5: i386
iPhone5s ~ 7Plus: x86_64
真机架构
3GS ~ 4s: armv7
5/5c: armv7s(armv7兼容 armv7s)
5s ~ 6sPlus: arm64</code><br>当我们用 iPhone5s 以上的模拟器打包的静态库架构是 x86_64，如果运行在 iPhone5及以下的模拟器，会报<code>Undefined symbols for architecture i386</code><br>让静态库支持所有模拟器对应的架构<br><code>Build Setting-&gt;Build Active Architecture Only</code>(只构建当前选中的模拟器或者真机的架构)–&gt;No</p>
<p>模拟器版本的静态库和真机版是不能通用的，<br>使用命令行可以合并静态库<br><code>lipo -create xxx1.a xxx2.a -output xxx3.a</code><br><code>lipo -info xxx.a</code> 可以查看 xxx.a 支持的架构</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;静态库&quot;&gt;&lt;a href=&quot;#静态库&quot; class=&quot;headerlink&quot; title=&quot;静态库&quot;&gt;&lt;/a&gt;静态库&lt;/h3&gt;&lt;p&gt;静态库:是一个外部函数与变量的集合体。&lt;br&gt;静态库的文件内容，通常包含一堆我们自定的变量与函数，内容不详动态链接库那么复杂，在编译
    
    </summary>
    
      <category term="iOS" scheme="http://oahgnehzoul.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 Xcode8中 autolayout 约束作用时间问题</title>
    <link href="http://oahgnehzoul.github.io/2016/10/21/%E5%85%B3%E4%BA%8E-Xcode8%E4%B8%AD-autolayout-%E7%BA%A6%E6%9D%9F%E4%BD%9C%E7%94%A8%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/"/>
    <id>http://oahgnehzoul.github.io/2016/10/21/关于-Xcode8中-autolayout-约束作用时间问题/</id>
    <published>2016-10-21T03:49:50.000Z</published>
    <updated>2016-10-23T11:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于-awakeFromNib"><a href="#关于-awakeFromNib" class="headerlink" title="关于 awakeFromNib"></a>关于 awakeFromNib</h3><p>awakeFromNib 是继承自 NSObject<br>这个方法是用来提供把 nib 文件加载到 application 中的，但是 nib 文件中添加的约束是什么时候生效的呢？</p>
<p>在 vc 的 <code>viewDidLoad</code> 调用之前，会先调用添加到 vc.view的子 View 的 <code>awakeFromNib</code> 方法（如果是从 nib 加载）</p>
<h3 id="layoutSubViews"><a href="#layoutSubViews" class="headerlink" title="layoutSubViews"></a>layoutSubViews</h3><p>从文档里可以看到，在 iOS5.1之前，这个方法does nothing,<br>否则，我们可以重写layoutSubViews中的约束来确定任何 subViews，不要直接调用，可以下一次视图更新之前调用 setNeedsLayout，如果想立即更新，调用 layoutIfNeeded.<br>view 的 layoutSubViews 被调用的情况:<br>1.addSubView<br>2.frame 发生改变<br>3.滑动 UIScrollView<br>4.旋转 Screen<br>5.改变 view的 subview 的 frame<br>6.调用 setLayoutSubViews</p>
<h3 id="setNeedsLayout"><a href="#setNeedsLayout" class="headerlink" title="setNeedsLayout"></a>setNeedsLayout</h3><p>标记为需要重新布局，异步调用 layoutIfNeeded,<br>在下一次 重新布局update cycle 之前调用 ,在主线程调用，因为 UIKit 下面的都不是线程安全的</p>
<h3 id="layoutIfNeeded"><a href="#layoutIfNeeded" class="headerlink" title="layoutIfNeeded"></a>layoutIfNeeded</h3><p>立即刷新 UI</p>
<h3 id="viewDidLayoutSubviews"><a href="#viewDidLayoutSubviews" class="headerlink" title="viewDidLayoutSubviews"></a>viewDidLayoutSubviews</h3><p>当 vc.view的 bounds发生变化的时候，比如旋转。view会调整 subviews 的 position，然后系统会调用这个方法。</p>
<h3 id="storyBoard-中约束作用时间问题"><a href="#storyBoard-中约束作用时间问题" class="headerlink" title="storyBoard 中约束作用时间问题"></a>storyBoard 中约束作用时间问题</h3><p>先在 storyBoard 的 vc.view 中添加一个 viewA,我试着在 VC 的 <code>awakeFromNib</code> 里面打印在viewA,为nil，如果对 viewA 发送消息也是无效的，因为 viewA 为 nil。但是 vc.view 的信息能打印出来，vc.view 的约束是正确的.那么在 storyBoard 中的 vc.view 上添加的子 View 是什么时候创建的？<br>在<code>viewDidLoad</code> 方法中打印 viewA，如果 storyBoard 中 viewA 存在misplaced，<code>viewA</code>打印出来的是<code>viewA:&lt;UIView: 0x7fd8595055e0; frame = (67 253; 240 128); autoresize = RM+BM; layer = &lt;CALayer: 0x60800003ecc0&gt;&gt;</code>，但是如果<code>updateFrames</code>之后，打印的是<br><code>viewA:&lt;UIView: 0x7feab1608610; frame = (0 0; 1000 1000); autoresize = RM+BM; layer = &lt;CALayer: 0x608000035140&gt;&gt;</code>,所以一旦把 <code>viewA updateFrames</code>，约束的作用时间就延后了，在 <code>ViewDidLoad</code> 之后？？<br>我又试着在 storyBoard 的 vc.view中添加了一个 子 view：viewB,在<code>viewDidLoad</code>中手动添加约束，发现是能获取到 viewA 的约束的，说明在storyBoard更新约束后， viewA 的约束作用时间确实延后了</p>
<p><code>[UINib instantiateWithOwner:options:]</code>方法会调用<code>[ViewController awakeFromNib]</code>，</p>
<p>VC 的<code>awakeFromNib</code>会调用 nib 文件里面 vc 的view 的子 View，然后 VC <code>awakeFromNib</code>然后<code>[UIViewController loadViewIfRequired]</code>会调用<code>[ViewController viewDidLoad]</code>方法，</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于-awakeFromNib&quot;&gt;&lt;a href=&quot;#关于-awakeFromNib&quot; class=&quot;headerlink&quot; title=&quot;关于 awakeFromNib&quot;&gt;&lt;/a&gt;关于 awakeFromNib&lt;/h3&gt;&lt;p&gt;awakeFromNib 是继承自 
    
    </summary>
    
      <category term="learn" scheme="http://oahgnehzoul.github.io/categories/learn/"/>
    
    
  </entry>
  
  <entry>
    <title>复习 Cocoapods 的一些命令</title>
    <link href="http://oahgnehzoul.github.io/2016/10/20/%E5%A4%8D%E4%B9%A0-Cocoapods-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <id>http://oahgnehzoul.github.io/2016/10/20/复习-Cocoapods-的一些命令/</id>
    <published>2016-10-20T11:20:00.000Z</published>
    <updated>2016-10-23T11:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天有看到说<code>ruby.taobao.org</code> 停止更新了，于是乎更新了<code>https://gems.ruby-china.org/</code></p>
<h4 id="CocoaPods-的安装和更新"><a href="#CocoaPods-的安装和更新" class="headerlink" title="CocoaPods 的安装和更新"></a>CocoaPods 的安装和更新</h4><p>之前用<code>sudo gem install cocoapods</code>就可以了<br>现在在 <code>EI Capitan</code> 系统下得<code>sudo gem install -n /usr/local/bin cocoapods</code><br>我们安装的 <code>cocoapods</code> 的 repo 在 <code>~/.cocoapods</code> 目录下</p>
<h4 id="卸载Cocoapods"><a href="#卸载Cocoapods" class="headerlink" title="卸载Cocoapods"></a>卸载Cocoapods</h4><p><code>sudo gem uninstall cocoapods -v xxxx</code><br>同理移除其他安装的 <code>gemlists</code></p>
<h4 id="一些容易遗忘的命令"><a href="#一些容易遗忘的命令" class="headerlink" title="一些容易遗忘的命令"></a>一些容易遗忘的命令</h4><p><code>gem source</code> 查看当前 gem 源<br><code>gem source --remove xxxx</code> 移除源<br><code>gem source -a xxxx</code>添加源<br><code>gem list</code> 查看安装的 local gems 列表<br><code>sudo gem update --system</code> 更新 Ruby gems 版本</p>
<h4 id="自动生成-gitignore文件"><a href="#自动生成-gitignore文件" class="headerlink" title="自动生成.gitignore文件"></a>自动生成<code>.gitignore</code>文件</h4><p>Github官方的上的<code>https://github.com/github/gitignore</code>有一些<code>.gitignore</code>文件，比较全。<br>同时，<code>https://www.gitignore.io/</code>上面也有教怎么自动生成<code>.gitignore</code> 文件。<br>我有对比过两个的差异，几乎没有。</p>
<p>下面是我的zsh 关于 gitignore 的设置，可以参考.<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gi</span><span class="params">()</span> </span>&#123; curl -L -s https:<span class="comment">//www.gitignore.io/api/$@ ;&#125;</span></div><div class="line">alias gitignore=<span class="string">'gi objective-c,xcode &gt;&gt; .gitignore'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天有看到说&lt;code&gt;ruby.taobao.org&lt;/code&gt; 停止更新了，于是乎更新了&lt;code&gt;https://gems.ruby-china.org/&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;CocoaPods-的安装和更新&quot;&gt;&lt;a href=&quot;#CocoaPod
    
    </summary>
    
      <category term="learn" scheme="http://oahgnehzoul.github.io/categories/learn/"/>
    
    
  </entry>
  
  <entry>
    <title>OC 中的一些基础知识</title>
    <link href="http://oahgnehzoul.github.io/2016/10/20/OC-%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://oahgnehzoul.github.io/2016/10/20/OC-中的一些基础知识/</id>
    <published>2016-10-20T04:07:33.000Z</published>
    <updated>2016-10-23T11:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>runtime 解释成中文就是[运行时]，是 OC 语言区别于 C 语言（静态语言）的动态特性。C 语言的方法调用在编译器就决定好，然后执行；OC 的方法调用本质上是消息发送，在编译器不知道要调用哪个函数，runtime 就是用来在运行的时候去找到调用的方法。</p>
<h3 id="OC中的object"><a href="#OC中的object" class="headerlink" title="OC中的object"></a>OC中的object</h3><p>什么是对象呢？任何一个物体都可以看做一个对象，一支笔，一个人，中国人，<br>OC 中，对象都可以用 id 来指向，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *id;</div><div class="line"><span class="comment">//public objc.h里的 objc_object 结构体</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">	Class isa OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;</div><div class="line"><span class="comment">//objc-privated.h 里面的 objc_object 结构体</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="keyword">isa_t</span> isa;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function">Class <span class="title">ISA</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Class <span class="title">getIsa</span><span class="params">()</span></span>;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>id是一个指向 objc_object 结构体的指针，<br>在 objc_object private结构体里面，有一个 isa 指针,<br>ISA()是返回 有 tagged pointer 的object 的isa.cls</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">union</span> <span class="title">isa_t</span></span></div><div class="line">&#123;</div><div class="line">	isa_t()&#123;&#125;</div><div class="line">	...</div><div class="line">	Class cls;</div><div class="line">	uintptr_t bits;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC中的-Class"><a href="#OC中的-Class" class="headerlink" title="OC中的 Class"></a>OC中的 Class</h3><p>public/objc.h 中</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div></pre></td></tr></table></figure>
<p>Class 是一个指向 objc_class 结构体的指针；</p>
<p>objc-runtime-old.h 中</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct objc_class:objc_object &#123;</div><div class="line">	Class superclass<span class="comment">;</span></div><div class="line">	const char *name<span class="comment">;</span></div><div class="line">	uint32_t version<span class="comment">;</span></div><div class="line">	uint32_t info<span class="comment">;</span></div><div class="line">	uint32_t <span class="keyword">instance_size;</span></div><div class="line">	struct old_ivar_list *ivar<span class="comment">;</span></div><div class="line">	struct old_method_list *methodLists<span class="comment">;</span></div><div class="line">	<span class="keyword">Cache </span><span class="keyword">cache;</span></div><div class="line">	struct old_protocol_list *protocols<span class="comment">;</span></div><div class="line">	....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>objc_class 也是一个 objc_object，类也是一种对象，比如人可以看做对象，也可以看成类。</p>
<h3 id="SEL-和-IMP"><a href="#SEL-和-IMP" class="headerlink" title="SEL 和 IMP"></a>SEL 和 IMP</h3><p><code>typedef struct objc_selector *SEL</code><br>SEL可以理解为方法的 id，OC 中不支持函数重载，因为一个类的方法列表中不能存在两个相同的 SEL，但是多个方法可以在不同的类中有相同的 SEL，继承之后可以复写父类的函数。</p>
<h3 id="消息传递过程"><a href="#消息传递过程" class="headerlink" title="消息传递过程"></a>消息传递过程</h3><p>objc_msgSend 调用过程<br>1.检测 SEL 是否应该被忽略<br>2.检测接收消息的 target 是否为 nil，如果是就忽略这个消息<br>3.通过 isa 寻找方法，直至根类 NSObject/NSProxy<br>  如果没找到就进入消息动态解析<br>在 public headers/message.h 中有<br><code>objc_msgSend(void /*id self, SEL op,...*/)</code><br><code>objc_msgSendSuper(void /*struct objc_super *super, SEL op,...*/)</code>等方法<br>比如我们调用[obj foo]方法，runtime 会转换成 <code>objc_msgSend（obj,@selector(foo));</code><br>因为对象(obj)是一个结构体，可以根据对象的地址获得 isa 指针，然后可以找到 isa 指向的类（obj的 Class），会在这个类中寻找对应的实例方法列表，列表中 key 是 SEL，value 是 IMP，@{SEL:IMP}，IMP 是指向方法实现的指针，如果当前方法列表中没有，会找到 superClass，在 superClass 中寻找<br><img src="http://upload-images.jianshu.io/upload_images/943858-0077900c0a20d492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h5 id="消息动态解析"><a href="#消息动态解析" class="headerlink" title="消息动态解析"></a>消息动态解析</h5><p><img src="http://upload-images.jianshu.io/upload_images/943858-7bbaf6ed68c48cab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>1.进入 resolveInstanceMethod 方法，默认为 NO，然后就会报错；我们可以通过 <code>class_addMethod</code>动态添加方法，并且返回 YES，就可以进入下一步。<br>2.进入 forwardingTargetForSelector 方法，默认返回 nil；我们可以指定某个对象来响应消息，进入下一步<br>3.进入 methodSignatureForSelector 方法，默认返回 nil；我们可以返回一个 methodSignature，进入 forwardInvocation,然后修改实现方法、响应对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;runtime&quot;&gt;&lt;a href=&quot;#runtime&quot; class=&quot;headerlink&quot; title=&quot;runtime&quot;&gt;&lt;/a&gt;runtime&lt;/h3&gt;&lt;p&gt;runtime 解释成中文就是[运行时]，是 OC 语言区别于 C 语言（静态语言）的动态特性。C 
    
    </summary>
    
      <category term="learn" scheme="http://oahgnehzoul.github.io/categories/learn/"/>
    
    
  </entry>
  
  <entry>
    <title>学习使用 blog</title>
    <link href="http://oahgnehzoul.github.io/2016/02/23/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8-blog/"/>
    <id>http://oahgnehzoul.github.io/2016/02/23/学习使用-blog/</id>
    <published>2016-02-22T18:20:46.000Z</published>
    <updated>2016-10-26T05:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　看了<a href="http://blog.devtang.com/2016/02/16/from-octopress-to-hexo/" target="_blank" rel="external">从Octopress迁移到Hexo</a>,然后看到下面评论中的<a href="http://king129.com" target="_blank" rel="external">king</a>的blog,觉得挺有意思的，看了些Hexo配合Github搭建博客的东西，造轮子copy了一下，一周只能休息一天真的不够o.o。<br>　　Markdown开头空格输入法切换为全角<br>　　主题是搬了<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">iissnan/hexo-theme-next</a>,看着简洁舒服。<br>为什么Cmd Markdown上传个本地图片还要￥99/年,买不起T.T<br>1.时间真的是个不经用的东西<br>2.为什么还有7篇读书笔记要写?<br>3.还要搞毕业设计真的头痛</p>
<blockquote>
<p>第一次用这个Markdown写，没办法.<code>sleep</code></p>
</blockquote>
<p>切换了一个看着很简洁舒服的主题. 10.23</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　看了&lt;a href=&quot;http://blog.devtang.com/2016/02/16/from-octopress-to-hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从Octopress迁移到Hexo&lt;/a&gt;,然后看到下面评论中的&lt;
    
    </summary>
    
    
  </entry>
  
</feed>
