<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于 Xcode8中 autolayout 约束作用时间问题]]></title>
      <url>http://oahgnehzoul.github.io/2016/10/21/%E5%85%B3%E4%BA%8E-Xcode8%E4%B8%AD-autolayout-%E7%BA%A6%E6%9D%9F%E4%BD%9C%E7%94%A8%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="关于-awakeFromNib"><a href="#关于-awakeFromNib" class="headerlink" title="关于 awakeFromNib"></a>关于 awakeFromNib</h3><p>awakeFromNib 是继承自 NSObject<br>这个方法是用来提供把 nib 文件加载到 application 中的，但是 nib 文件中添加的约束是什么时候生效的呢？</p>
<p>在 vc 的 <code>viewDidLoad</code> 调用之前，会先调用添加到 vc.view的子 View 的 <code>awakeFromNib</code> 方法（如果是从 nib 加载）</p>
<h3 id="layoutSubViews"><a href="#layoutSubViews" class="headerlink" title="layoutSubViews"></a>layoutSubViews</h3><p>从文档里可以看到，在 iOS5.1之前，这个方法does nothing,<br>否则，我们可以重写layoutSubViews中的约束来确定任何 subViews，不要直接调用，可以下一次视图更新之前调用 setNeedsLayout，如果想立即更新，调用 layoutIfNeeded.<br>view 的 layoutSubViews 被调用的情况:<br>1.addSubView<br>2.frame 发生改变<br>3.滑动 UIScrollView<br>4.旋转 Screen<br>5.改变 view的 subview 的 frame<br>6.调用 setLayoutSubViews</p>
<h3 id="setNeedsLayout"><a href="#setNeedsLayout" class="headerlink" title="setNeedsLayout"></a>setNeedsLayout</h3><p>标记为需要重新布局，异步调用 layoutIfNeeded,<br>在下一次 重新布局update cycle 之前调用 ,在主线程调用，因为 UIKit 下面的都不是线程安全的</p>
<h3 id="layoutIfNeeded"><a href="#layoutIfNeeded" class="headerlink" title="layoutIfNeeded"></a>layoutIfNeeded</h3><p>立即刷新 UI</p>
<h3 id="viewDidLayoutSubviews"><a href="#viewDidLayoutSubviews" class="headerlink" title="viewDidLayoutSubviews"></a>viewDidLayoutSubviews</h3><p>当 vc.view的 bounds发生变化的时候，比如旋转。view会调整 subviews 的 position，然后系统会调用这个方法。</p>
<h3 id="storyBoard-中约束作用时间问题"><a href="#storyBoard-中约束作用时间问题" class="headerlink" title="storyBoard 中约束作用时间问题"></a>storyBoard 中约束作用时间问题</h3><p>先在 storyBoard 的 vc.view 中添加一个 viewA,我试着在 VC 的 <code>awakeFromNib</code> 里面打印在viewA,为nil，如果对 viewA 发送消息也是无效的，因为 viewA 为 nil。但是 vc.view 的信息能打印出来，vc.view 的约束是正确的.那么在 storyBoard 中的 vc.view 上添加的子 View 是什么时候创建的？<br>在<code>viewDidLoad</code> 方法中打印 viewA，如果 storyBoard 中 viewA 存在misplaced，<code>viewA</code>打印出来的是<code>viewA:&lt;UIView: 0x7fd8595055e0; frame = (67 253; 240 128); autoresize = RM+BM; layer = &lt;CALayer: 0x60800003ecc0&gt;&gt;</code>，但是如果<code>updateFrames</code>之后，打印的是<br><code>viewA:&lt;UIView: 0x7feab1608610; frame = (0 0; 1000 1000); autoresize = RM+BM; layer = &lt;CALayer: 0x608000035140&gt;&gt;</code>,所以一旦把 <code>viewA updateFrames</code>，约束的作用时间就延后了，在 <code>ViewDidLoad</code> 之后？？<br>我又试着在 storyBoard 的 vc.view中添加了一个 子 view：viewB,在<code>viewDidLoad</code>中手动添加约束，发现是能获取到 viewA 的约束的，说明在storyBoard更新约束后， viewA 的约束作用时间确实延后了</p>
<p><code>[UINib instantiateWithOwner:options:]</code>方法会调用<code>[ViewController awakeFromNib]</code>，</p>
<p>VC 的<code>awakeFromNib</code>会调用 nib 文件里面 vc 的view 的子 View，然后 VC <code>awakeFromNib</code>然后<code>[UIViewController loadViewIfRequired]</code>会调用<code>[ViewController viewDidLoad]</code>方法，</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[复习 Cocoapods 的一些命令]]></title>
      <url>http://oahgnehzoul.github.io/2016/10/20/%E5%A4%8D%E4%B9%A0-Cocoapods-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>昨天有看到说<code>ruby.taobao.org</code> 停止更新了，于是乎更新了<code>https://gems.ruby-china.org/</code></p>
<h4 id="CocoaPods-的安装和更新"><a href="#CocoaPods-的安装和更新" class="headerlink" title="CocoaPods 的安装和更新"></a>CocoaPods 的安装和更新</h4><p>之前用<code>sudo gem install cocoapods</code>就可以了<br>现在在 <code>EI Capitan</code> 系统下得<code>sudo gem install -n /usr/local/bin cocoapods</code><br>我们安装的 <code>cocoapods</code> 的 repo 在 <code>~/.cocoapods</code> 目录下</p>
<h4 id="卸载Cocoapods"><a href="#卸载Cocoapods" class="headerlink" title="卸载Cocoapods"></a>卸载Cocoapods</h4><p><code>sudo gem uninstall cocoapods -v xxxx</code><br>同理移除其他安装的 <code>gemlists</code></p>
<h4 id="一些容易遗忘的命令"><a href="#一些容易遗忘的命令" class="headerlink" title="一些容易遗忘的命令"></a>一些容易遗忘的命令</h4><p><code>gem source</code> 查看当前 gem 源<br><code>gem source --remove xxxx</code> 移除源<br><code>gem source -a xxxx</code>添加源<br><code>gem list</code> 查看安装的 local gems 列表<br><code>sudo gem update --system</code> 更新 Ruby gems 版本</p>
<h4 id="自动生成-gitignore文件"><a href="#自动生成-gitignore文件" class="headerlink" title="自动生成.gitignore文件"></a>自动生成<code>.gitignore</code>文件</h4><p>Github官方的上的<code>https://github.com/github/gitignore</code>有一些<code>.gitignore</code>文件，比较全。<br>同时，<code>https://www.gitignore.io/</code>上面也有教怎么自动生成<code>.gitignore</code> 文件。<br>我有对比过两个的差异，几乎没有。</p>
<p>下面是我的zsh 关于 gitignore 的设置，可以参考.<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gi</span><span class="params">()</span> </span>&#123; curl -L -s https:<span class="comment">//www.gitignore.io/api/$@ ;&#125;</span></div><div class="line">alias gitignore=<span class="string">'gi objective-c,xcode &gt;&gt; .gitignore'</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OC 中的一些基础知识]]></title>
      <url>http://oahgnehzoul.github.io/2016/10/20/OC-%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>runtime 解释成中文就是[运行时]，是 OC 语言区别于 C 语言（静态语言）的动态特性。C 语言的方法调用在编译器就决定好，然后执行；OC 的方法调用本质上是消息发送，在编译器不知道要调用哪个函数，runtime 就是用来在运行的时候去找到调用的方法。</p>
<h3 id="OC中的object"><a href="#OC中的object" class="headerlink" title="OC中的object"></a>OC中的object</h3><p>什么是对象呢？任何一个物体都可以看做一个对象，一支笔，一个人，中国人，<br>OC 中，对象都可以用 id 来指向，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *id;</div><div class="line"><span class="comment">//public objc.h里的 objc_object 结构体</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">	Class isa OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;</div><div class="line"><span class="comment">//objc-privated.h 里面的 objc_object 结构体</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="keyword">isa_t</span> isa;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function">Class <span class="title">ISA</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Class <span class="title">getIsa</span><span class="params">()</span></span>;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>id是一个指向 objc_object 结构体的指针，<br>在 objc_object private结构体里面，有一个 isa 指针,<br>ISA()是返回 有 tagged pointer 的object 的isa.cls</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">union</span> <span class="title">isa_t</span></span></div><div class="line">&#123;</div><div class="line">	isa_t()&#123;&#125;</div><div class="line">	...</div><div class="line">	Class cls;</div><div class="line">	uintptr_t bits;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC中的-Class"><a href="#OC中的-Class" class="headerlink" title="OC中的 Class"></a>OC中的 Class</h3><p>public/objc.h 中</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div></pre></td></tr></table></figure>
<p>Class 是一个指向 objc_class 结构体的指针；</p>
<p>objc-runtime-old.h 中</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct objc_class:objc_object &#123;</div><div class="line">	Class superclass<span class="comment">;</span></div><div class="line">	const char *name<span class="comment">;</span></div><div class="line">	uint32_t version<span class="comment">;</span></div><div class="line">	uint32_t info<span class="comment">;</span></div><div class="line">	uint32_t <span class="keyword">instance_size;</span></div><div class="line">	struct old_ivar_list *ivar<span class="comment">;</span></div><div class="line">	struct old_method_list *methodLists<span class="comment">;</span></div><div class="line">	<span class="keyword">Cache </span><span class="keyword">cache;</span></div><div class="line">	struct old_protocol_list *protocols<span class="comment">;</span></div><div class="line">	....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>objc_class 也是一个 objc_object，类也是一种对象，比如人可以看做对象，也可以看成类。</p>
<h3 id="SEL-和-IMP"><a href="#SEL-和-IMP" class="headerlink" title="SEL 和 IMP"></a>SEL 和 IMP</h3><p><code>typedef struct objc_selector *SEL</code><br>SEL可以理解为方法的 id，OC 中不支持函数重载，因为一个类的方法列表中不能存在两个相同的 SEL，但是多个方法可以在不同的类中有相同的 SEL，继承之后可以复写父类的函数。</p>
<h3 id="消息传递过程"><a href="#消息传递过程" class="headerlink" title="消息传递过程"></a>消息传递过程</h3><p>objc_msgSend 调用过程<br>1.检测 SEL 是否应该被忽略<br>2.检测接收消息的 target 是否为 nil，如果是就忽略这个消息<br>3.通过 isa 寻找方法，直至根类 NSObject/NSProxy<br>  如果没找到就进入消息动态解析<br>在 public headers/message.h 中有<br><code>objc_msgSend(void /*id self, SEL op,...*/)</code><br><code>objc_msgSendSuper(void /*struct objc_super *super, SEL op,...*/)</code>等方法<br>比如我们调用[obj foo]方法，runtime 会转换成 <code>objc_msgSend（obj,@selector(foo));</code><br>因为对象(obj)是一个结构体，可以根据对象的地址获得 isa 指针，然后可以找到 isa 指向的类（obj的 Class），会在这个类中寻找对应的实例方法列表，列表中 key 是 SEL，value 是 IMP，@{SEL:IMP}，IMP 是指向方法实现的指针，如果当前方法列表中没有，会找到 superClass，在 superClass 中寻找<br><img src="http://upload-images.jianshu.io/upload_images/943858-0077900c0a20d492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h5 id="消息动态解析"><a href="#消息动态解析" class="headerlink" title="消息动态解析"></a>消息动态解析</h5><p><img src="http://upload-images.jianshu.io/upload_images/943858-7bbaf6ed68c48cab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>1.进入 resolveInstanceMethod 方法，默认为 NO，然后就会报错；我们可以通过 <code>class_addMethod</code>动态添加方法，并且返回 YES，就可以进入下一步。<br>2.进入 forwardingTargetForSelector 方法，默认返回 nil；我们可以指定某个对象来响应消息，进入下一步<br>3.进入 methodSignatureForSelector 方法，默认返回 nil；我们可以返回一个 methodSignature，进入 forwardInvocation,然后修改实现方法、响应对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习使用blog]]></title>
      <url>http://oahgnehzoul.github.io/2016/02/23/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8blog/</url>
      <content type="html"><![CDATA[<p>　　看了<a href="http://blog.devtang.com/2016/02/16/from-octopress-to-hexo/" target="_blank" rel="external">从Octopress迁移到Hexo</a>,然后看到下面评论中的<a href="http://king129.com" target="_blank" rel="external">king</a>的blog,觉得挺有意思的，看了些Hexo配合Github搭建博客的东西，造轮子copy了一下，一周只能休息一天真的不够o.o。<br>　　Markdown开头空格输入法切换为全角<br>　　主题是搬了<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">iissnan/hexo-theme-next</a>,看着简洁舒服。<br>为什么Cmd Markdown上传个本地图片还要￥99/年,买不起T.T<br>1.时间真的是个不经用的东西<br>2.为什么还有7篇读书笔记要写?<br>3.还要搞毕业设计真的头痛</p>
<blockquote>
<p>第一次用这个Markdown写，没办法.<code>sleep</code></p>
</blockquote>
<p>切换了一个看着很简洁舒服的主题. 10.23</p>
]]></content>
    </entry>
    
  
  
</search>
